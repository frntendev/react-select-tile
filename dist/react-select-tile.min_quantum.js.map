{"version":3,"sources":["src/index.tsx","src/styles.ts","src/Menu.tsx","src/Input.tsx","src/MenuItem.tsx"],"names":["react_1","$fsx","r","core_1","styles_1","GlobalStyles_1","helpers_1","Menu_1","Input_1","MenuItem_1","EmptyStatus_1","exports","Select","value","onItemClick","onInputChange","onMenuClose","onMenuOpen","menuIsOpen","containerClassName","containerStyle","inputClassName","inputStyle","menuClassName","menuStyle","menuItemClassName","menuItemStyle","activeItemClassName","activeItemStyle","menuComponent","emptyComponent","menuItemComponent","openAnimationDelay","menuItemColumns","menuItemWidth","menuPosition","placeholder","options","iconClassName","iconStyle","showMenu","setShowMenu","useState","showTransition","setShowTransition","offsetX","setOffsetX","offsetY","setOffsetY","menuWidth","setMenuWidth","inputHeight","setInputHeight","menuRef","useRef","inputRef","useOutsideAlerter","setTimeout","useEffect","lockBody","position","getPosition","_a","current","_c","_b","offsetHeight","x","y","_e","_d","_g","_f","offsetWidth","unLockBody","EmptyContent","selectedItem","find","s","jsx","css","style","container","className","icon","GlobalStyles","Input","onClick","onFocus","onChange","label","Menu","length","EmptyStatus","map","MenuItem","key","isActive","swipeIn","keyframes","swipeOut","input","menu","menuItem","menuItemActive","children","MenuContent","ref","window","innerHeight","defaultValue","readOnly","type","MenuItemContent","styles","Object","assign"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport { useRef, useEffect, useState } from \"react\";\nimport { jsx } from \"@emotion/core\";\nimport { style } from \"./styles\";\nimport { GlobalStyles } from \"./GlobalStyles\";\nimport {\n  getPosition,\n  useOutsideAlerter,\n  lockBody,\n  unLockBody\n} from \"./helpers\";\nimport { SelectProps, Option } from \"./types\";\nimport { Menu } from \"./Menu\";\nimport { Input } from \"./Input\";\nimport { MenuItem } from \"./MenuItem\";\nimport { EmptyStatus } from \"./EmptyStatus\";\n\nexport const Select = ({\n  value,\n  onItemClick,\n  onInputChange,\n  onMenuClose,\n  onMenuOpen,\n  menuIsOpen = false,\n  containerClassName,\n  containerStyle,\n  inputClassName,\n  inputStyle,\n  menuClassName,\n  menuStyle,\n  menuItemClassName,\n  menuItemStyle,\n  activeItemClassName,\n  activeItemStyle,\n  menuComponent,\n  emptyComponent,\n  menuItemComponent,\n  openAnimationDelay = 300,\n  menuItemColumns = 4,\n  menuItemWidth = 120,\n  menuPosition = \"bottom\",\n  placeholder = \"\",\n  options,\n  iconClassName,\n  iconStyle\n}: SelectProps) => {\n  const [showMenu, setShowMenu] = useState<Boolean>(menuIsOpen);\n  const [showTransition, setShowTransition] = useState<Boolean>(false);\n  const [offsetX, setOffsetX] = useState<number>(0);\n  const [offsetY, setOffsetY] = useState<number>(0);\n  const [menuWidth, setMenuWidth] = useState<number>(0);\n  const [inputHeight, setInputHeight] = useState<number>(0);\n  const menuRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const delayedExpiration = (): void => {\n    setShowTransition(true);\n    setTimeout(() => {\n      setShowMenu(false);\n      if (onMenuClose) onMenuClose();\n      setShowTransition(false);\n    }, openAnimationDelay);\n  };\n\n  useOutsideAlerter(menuRef, delayedExpiration);\n\n  useEffect(() => {\n    if (showMenu) {\n      lockBody();\n      const position = getPosition(inputRef?.current);\n      setInputHeight(inputRef?.current?.offsetHeight || 0);\n      setOffsetX(position.x);\n      setOffsetY(position.y + (inputRef?.current?.offsetHeight || 0));\n      setMenuWidth(inputRef?.current?.offsetWidth || 0);\n      if (onMenuOpen) onMenuOpen();\n    } else {\n      unLockBody();\n    }\n  }, [showMenu]);\n\n  const EmptyContent = emptyComponent;\n  const selectedItem = options.find(s => s.value === value);\n\n  return (\n    <div\n      css={style.container}\n      className={containerClassName}\n      style={containerStyle}\n    >\n      <span css={style.icon} className={iconClassName} style={iconStyle} />\n      <GlobalStyles />\n\n      <Input\n        inputStyle={inputStyle}\n        onClick={() => setShowMenu(true)}\n        onFocus={() => setShowMenu(true)}\n        onChange={onInputChange}\n        value={selectedItem?.label || \"\"}\n        inputRef={inputRef}\n        inputClassName={inputClassName}\n        placeholder={placeholder}\n      />\n      {showMenu && (\n        <Menu\n          menuRef={menuRef}\n          menuItemColumns={menuItemColumns}\n          menuItemWidth={menuItemWidth}\n          menuWidth={menuWidth}\n          offsetX={offsetX}\n          offsetY={offsetY}\n          menuPosition={menuPosition}\n          inputHeight={inputHeight}\n          showTransition={showTransition}\n          menuComponent={menuComponent}\n          menuClassName={menuClassName}\n          menuStyle={menuStyle}\n        >\n          {(!options || options.length === 0) &&\n            (EmptyContent ? <EmptyContent /> : <EmptyStatus />)}\n          {options &&\n            options.map(({ label, value }: Option) => (\n              <MenuItem\n                key={value}\n                value={value}\n                isActive={value === selectedItem?.value}\n                onClick={onItemClick}\n                menuItemClassName={menuItemClassName}\n                menuItemStyle={menuItemStyle}\n                menuItemComponent={menuItemComponent}\n                activeItemClassName={activeItemClassName}\n                activeItemStyle={activeItemStyle}\n              >\n                {label}\n              </MenuItem>\n            ))}\n        </Menu>\n      )}\n    </div>\n  );\n};\n","import { css, keyframes } from \"@emotion/core\";\n\nexport const swipeIn = keyframes`\n  from {\n      opacity: 0;\n      transform: translateY(-10px);\n  }\n\n  to {\n      opacity: 1;\n      transform: translateY(0);\n  }\n`;\n\nexport const swipeOut = keyframes`\n  from {\n    opacity: 1;\n      transform: translateY(0);\n\n  }\n\n  to {\n    opacity: 0;\n      transform: translateY(-10px);\n  }\n`;\n\nexport const style = {\n  container: css`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex: 1;\n    min-height: 32px;\n    pointer-events: auto;\n    background: #fff;\n    cursor: default;\n    border-width: 1px;\n    border-style: solid;\n    border-color: #ccc;\n    z-index: 0;\n    box-sizing: border-box;\n    max-width: 100%;\n    box-shadow: none;\n    position: relative;\n    z-index: 99;\n    label: container;\n  `,\n  icon: css`\n    border-style: solid;\n    border-width: 0.15em 0.15em 0 0;\n    content: \"\";\n    display: inline-block;\n    height: 0.45em;\n    position: absolute;\n    vertical-align: top;\n    width: 0.45em;\n    right: 0.7rem;\n    top: 50%;\n    border-color: #cccccc;\n    transform: translateY(-50%) rotate(135deg);\n    label: icon;\n  `,\n  input: css`\n    outline: none;\n    width: 100%;\n    height: 100%;\n    padding: 5px 10px;\n    border: 0;\n    cursor: pointer;\n    color: transparent;\n    text-shadow: 0 0 0 #000;\n    font-size: 1rem;\n    label: input;\n  `,\n  menu: css`\n    max-height: 200px;\n    overflow-y: scroll;\n    background: #f5f5f5;\n    z-index: 999;\n    padding: 1.25rem;\n    box-sizing: border-box;\n    display: grid;\n    grid-template-columns: repeat(4, 120px);\n    grid-gap: 0.25rem;\n    animation: ${swipeIn} 0.3s ease forwards;\n    box-shadow: 1px 1px 20px rgba(0, 0, 0, 0.05);\n    border: 1px solid #e4e4e4;\n    &:after {\n      content: \"\";\n      display: block;\n      height: 1.25rem;\n      width: 100%;\n    }\n    label: menu;\n  `,\n  menuItem: css`\n    padding: 0.5rem;\n    background: #e6e6e6;\n    cursor: pointer;\n    transition: 0.2s all ease;\n    label: menuItem;\n\n    &:hover {\n      background: #9575cd;\n    }\n  `,\n  menuItemActive: css`\n    background: #9575cd;\n    label: menuItemActive;\n  `\n};\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport { style, swipeOut } from \"./styles\";\nimport { MenuProps } from \"./types\";\n\nexport const Menu = ({\n  menuRef,\n  menuItemColumns,\n  menuItemWidth,\n  menuWidth,\n  offsetX,\n  offsetY,\n  menuPosition,\n  inputHeight,\n  showTransition,\n  menuClassName,\n  menuStyle,\n  menuComponent,\n  children\n}: MenuProps) => {\n  const MenuContent = menuComponent;\n\n  return (\n    <div\n      ref={menuRef}\n      css={css`\n        ${css`\n          position: fixed;\n          max-width: calc(${menuWidth}px + 110px);\n          min-width: ${menuWidth}px;\n          left: ${offsetX}px;\n          ${menuPosition === \"bottom\"\n            ? `top: calc(${offsetY}px + 5px)`\n            : `bottom : calc(${window.innerHeight}px - ${offsetY}px + ${inputHeight}px + 5px)`};\n        `}\n      `}\n      className={menuClassName}\n      style={menuStyle}\n    >\n      {MenuContent ? (\n        <MenuContent>{children}</MenuContent>\n      ) : (\n        <div\n          css={css`\n            ${style.menu}\n            ${css`\n              grid-template-columns: repeat(\n                ${menuItemColumns},\n                ${menuItemWidth}px\n              );\n            `}\n            ${showTransition &&\n              css`\n                animation: ${swipeOut} 0.3s ease forwards;\n              `}\n          `}\n        >\n          {children}\n        </div>\n      )}\n    </div>\n  );\n};\n","/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport { style } from \"./styles\";\nimport { InputProps } from \"./types\";\n\nexport const Input = ({\n  inputClassName,\n  inputStyle,\n  value = \"\",\n  inputRef,\n  placeholder,\n  onClick,\n  onFocus,\n  onChange,\n  defaultValue\n}: InputProps) => {\n  return (\n    <input\n      readOnly\n      css={style.input}\n      className={inputClassName}\n      style={inputStyle}\n      type=\"text\"\n      onClick={onClick}\n      onFocus={onFocus}\n      onChange={onChange}\n      value={value}\n      ref={inputRef}\n      placeholder={placeholder}\n      defaultValue={defaultValue}\n    />\n  );\n};\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport { style } from \"./styles\";\nimport { MenuItemProps } from \"./types\";\n\nexport const MenuItem = ({\n  onClick,\n  menuItemClassName,\n  menuItemStyle,\n  children,\n  menuItemComponent,\n  value = \"\",\n  isActive,\n  activeItemClassName,\n  activeItemStyle\n}: MenuItemProps) => {\n  const MenuItemContent = menuItemComponent;\n  const styles = {\n    ...menuItemStyle,\n    ...(isActive && activeItemStyle)\n  };\n\n  return MenuItemContent ? (\n    <MenuItemContent>{children}</MenuItemContent>\n  ) : (\n    <div\n      onClick={() => onClick && onClick(value)}\n      css={css`\n        ${style.menuItem};\n        ${isActive && style.menuItemActive}\n      `}\n      className={`${menuItemClassName}${isActive && ` ${activeItemClassName}`}`}\n      style={styles}\n    >\n      <div>{children}</div>\n    </div>\n  );\n};\n"]}